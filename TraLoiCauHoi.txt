Lab03.
	Câu trả lời Lab 3 nằm trong Lab03!

Lab04. 
	III. Đánh giá kết quả:
		1. Giải thích các đoạn code sau:
			android:layout_width="match_parent"

			Thiết lập chiều rộng của view bằng với chiều rộng của view cha (parent), tức là chiếm toàn bộ chiều rộng có sẵn.

			android:layout_height="wrap_content"

			Thiết lập chiều cao của view vừa đủ để chứa nội dung bên trong, tự động điều chỉnh theo kích thước nội dung.

			android:orientation="vertical"

			Sắp xếp các view con theo chiều dọc (từ trên xuống dưới). (Lưu ý: thuộc tính này không có trong layout hiện tại vì đang dùng TableLayout)

		2. So sánh sự khác nhau:
			android:gravity="center" & android:layout_gravity="center"

			android:gravity="center": Căn giữa nội dung bên trong view đó
			android:layout_gravity="center": Căn giữa chính view đó trong view cha của nó

			padding & margin

			padding: Khoảng cách từ viền của view đến nội dung bên trong view đó
			margin: Khoảng cách từ viền của view đến các view khác xung quanh nó

		3. Giải thích ý nghĩa các dòng lệnh:
			DecimalFormat dcf=new DecimalFormat("#.0"); editBMI.setText(dcf.format(BMI));

			Tạo đối tượng DecimalFormat để định dạng số thập phân với 1 chữ số sau dấu phẩy (#.0), sau đó hiển thị giá trị BMI đã được định dạng lên EditText editBMI.

			double BMI=W/Math.pow(H, 2);

			Tính chỉ số BMI theo công thức BMI = Cân nặng / (Chiều cao)², trong đó Math.pow(H, 2) tính H mũ 2.

			double H=Double.parseDouble(editChieucao.getText()+"");

			Lấy text từ EditText editChieucao, chuyển đổi thành chuỗi (+""), rồi chuyển đổi chuỗi đó thành số thực kiểu double để lưu vào biến H.

		4. Sơ đồ cây phân cấp Layout:
TableLayout (gốc)
→ TextView: "Chương trình tính chỉ số BMI"
→ TableRow 1
  → TextView: "Nhập Tên:"
  → EditText: edtten
→ TableRow 2
  → TextView: "Chiều Cao:"
  → EditText: edtchieucao
→ TableRow 3
  → TextView: "Cân Nặng:"
  → EditText: edtcannang
→ Button: btnBMI – "Tính BMI"
→ TableRow 4
  → TextView: "BMI ="
  → EditText: edtBMI
→ TableRow 5
  → TextView: "Chuẩn đoán:"
  → EditText: edtChuanDoan

Lab08.
    Bài 1:
           Màn hình chính (MainActivity):

           Hiển thị 2 nút: "CALL PHONE" và "SEND SMS" với giao diện màu xanh lá trên nền xám
           Khi nhấn nút "CALL PHONE": chuyển sang màn hình CallPhoneActivity
           Khi nhấn nút "SEND SMS": chuyển sang màn hình SendSMSActivity

           Màn hình CallPhoneActivity:

           Hiển thị EditText để nhập số điện thoại
           Có nút gọi điện (hình điện thoại) và nút "BACK"
           Khi nhập số và nhấn nút gọi: ứng dụng mở ứng dụng gọi điện của hệ thống với số đã nhập
           Nút "BACK" quay về màn hình chính

           Màn hình SendSMSActivity:

           Hiển thị EditText để nhập số điện thoại
           Có nút gửi SMS (hình tin nhắn) và nút "BACK"
           Khi nhập số và nhấn nút SMS: ứng dụng mở ứng dụng tin nhắn của hệ thống với số đã nhập
           Nút "BACK" quay về màn hình chính

           Nhận xét:
           Ứng dụng hoạt động đúng chức năng yêu cầu
           Giao diện đơn giản, dễ sử dụng
           Sử dụng Intent một cách hiệu quả để gọi các ứng dụng hệ thống
           Navigation giữa các Activity hoạt động mượt mà
           Tuy nhiên:
           Cần phải cấp quyền CALL_PHONE và SEND_SMS trong AndroidManifest.xml
           Chưa có xử lý lỗi khi người dùng nhập số điện thoại không hợp lệ
    Bài 2:
            Kết quả hoạt động:

            Ứng dụng khởi động thành công, hiển thị giao diện với ImageView chứa ảnh mặc định và nút ImageButton ở dưới
            Khi nhấn vào nút máy ảnh, ứng dụng sẽ mở camera của thiết bị
            Sau khi chụp ảnh và nhấn OK, ảnh vừa chụp sẽ hiển thị trên ImageView thay thế ảnh ban đầu

            Nhận xét:

            Chương trình hoạt động đúng yêu cầu đề bài, thực hiện được chức năng chụp ảnh và hiển thị ảnh
            Giao diện đơn giản, dễ sử dụng với layout dọc (LinearLayout vertical)
            Sử dụng Intent với action ACTION_IMAGE_CAPTURE để gọi camera hệ thống
            Code sử dụng ActivityResultLauncher hiện đại, tương thích với Android phiên bản mới
            Ảnh chụp được hiển thị dưới dạng thumbnail (ảnh nhỏ) do sử dụng extras "data"
            Cần quyền CAMERA đã được khai báo trong AndroidManifest để truy cập camera

Lab11.
    Intent Filter là gì?
    Intent Filter là một thành phần trong Android được khai báo trong file AndroidManifest.xml, có chức năng lọc và xác định các Intent mà một Activity, Service hoặc BroadcastReceiver có thể nhận và xử lý. Nó hoạt động như một bộ lọc để Android system biết được ứng dụng nào có thể xử lý một Intent cụ thể.

    Vai trò của Intent Filter trong chương trình này:
    Đăng ký khả năng xử lý URL: Intent Filter trong WebViewActivity đăng ký với Android system rằng ứng dụng có thể xử lý các URL có scheme "https", giúp ứng dụng trở thành một lựa chọn khi người dùng mở link web.
    Tạo lựa chọn cho người dùng: Khi MainActivity gọi Intent.ACTION_VIEW với URL, Android system sẽ hiển thị dialog "Complete action using" cho phép người dùng chọn giữa Browser mặc định và ứng dụng của chúng ta.
    Xử lý Intent tự động: Khi người dùng chọn ứng dụng của chúng ta, Intent Filter sẽ chuyển hướng Intent đến WebViewActivity, đồng thời truyền dữ liệu URL qua Intent.getData().
    Tích hợp với hệ thống: Giúp ứng dụng tích hợp sâu hơn với Android system, cho phép ứng dụng có thể được gọi từ các ứng dụng khác khi có yêu cầu mở URL.
    Lọc loại dữ liệu: Chỉ chấp nhận các Intent có action là VIEW và data scheme là "https", đảm bảo chỉ xử lý đúng loại Intent mong muốn.